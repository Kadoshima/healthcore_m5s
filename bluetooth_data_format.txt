# HealthCore M5 Bluetoothデータフォーマット仕様

## システム構成
- **ハードウェア**: M5StickC Plus 2 (ESP32-PICO-D4, BMI270 IMUセンサー搭載)
- **送信側**: M5StickC Plus 2 (ファームウェア: PlatformIO/Arduino)
- **受信側**: スマートフォン (Android/iOS上で動作するFlutterアプリ)
- **データフロー**: センサデータ取得 → BPM計算 → Bluetooth送信 → スマートフォン受信

## 概要
このドキュメントではM5StickC Plus 2（歩行分析モジュール）からスマートフォンへBluetooth経由で送信されるデータフォーマットについて説明します。データはJSONフォーマットで送信され、生データモードとBPM（歩行ピッチ）モードの2種類があります。

## 接続プロトコル
- **プロトコル**: Bluetooth Serial (SPP - Serial Port Profile)
- **デバイス名**: "M5StickCPlus2"
- **通信方向**: M5StickCからスマートフォンへの一方向通信
- **データ形式**: JSON文字列（各メッセージは改行で区切られる）

## JSONデータフォーマット

### 共通フィールド
すべてのメッセージに含まれる共通フィールド:
```json
{
  "device": "M5StickCPlus2",
  "timestamp": 1234567890,  // ミリ秒単位のタイムスタンプ
  "type": "..."             // "raw"または"bpm"
}
```

### 1. 生データモード (Raw Data)
加速度センサーの生データを送信:
```json
{
  "device": "M5StickCPlus2",
  "timestamp": 1234567890,
  "type": "raw",
  "data": {
    "accX": 0.123,          // X軸加速度 (G)
    "accY": -0.456,         // Y軸加速度 (G)
    "accZ": 0.789,          // Z軸加速度 (G)
    "magnitude": 0.912      // 合成加速度の大きさ
  }
}
```

### 2. BPM (歩行ピッチ) モード
計算された歩行ピッチ情報を送信:
```json
{
  "device": "M5StickCPlus2",
  "timestamp": 1234567890,
  "type": "bpm",
  "data": {
    "bpm": 92.5,            // 推定歩行ピッチ (steps per minute)
    "lastInterval": 652     // 最後の2ステップ間の時間間隔 (ミリ秒)
  }
}
```

## モード切替
データモードの切替は以下の方法で行えます:
1. USBシリアル経由: 'r'または'R'キーで生データモード、'b'または'B'キーでBPMモードに切替
2. M5StickCのボタン: Aボタンで2つのモードを切替（実装済みだがボタン処理のクラッシュ問題があるため現在は無効）

## 通信頻度
- **生データモード**: センサのサンプリングレート（約50Hz）に準ずる
- **BPMモード**: 定期的な更新（約1秒間隔）

## スマートフォン側での実装注意点
- 受信したJSONデータを解析し、"type"フィールドを確認してデータタイプを判別してください
- データ損失対策として、一定期間データが受信できない場合の処理を実装することを推奨します
- Bluetooth接続が切断された場合の再接続処理を実装してください

## サンプルコード (M5StickC側)
```cpp
// JSONドキュメントを作成
StaticJsonDocument<200> doc;

// 共通フィールド
doc["device"] = "M5StickCPlus2";
doc["timestamp"] = currentTime;

if (sendRawData) {
  // 生の加速度データを送信
  doc["type"] = "raw";
  JsonObject data = doc.createNestedObject("data");
  data["accX"] = accX;
  data["accY"] = accY;
  data["accZ"] = accZ;
  data["magnitude"] = sqrt(accX*accX + accY*accY + accZ*accZ);
} else {
  // 解析済みの歩行ピッチデータを送信
  doc["type"] = "bpm";
  JsonObject data = doc.createNestedObject("data");
  data["bpm"] = currentBPM;
  
  // 最後のステップ間隔も含める（歩行リズムの安定性評価に有用）
  if (stepIndex > 0) {
    // 前回と前々回のステップ間の時間を計算
    unsigned long interval = stepTimes[prev] - stepTimes[prevprev];
    data["lastInterval"] = interval;
  }
}

// JSONをシリアルに送信
String jsonString;
serializeJson(doc, jsonString);
SerialBT.println(jsonString);
```

## Flutter側での受信例
```dart
// Bluetooth接続と受信処理の例
void _onDataReceived(String data) {
  try {
    // JSONデータをパース
    Map<String, dynamic> jsonData = jsonDecode(data);
    
    String type = jsonData['type'];
    if (type == 'raw') {
      // 生データの処理
      var accX = jsonData['data']['accX'];
      var accY = jsonData['data']['accY'];
      var accZ = jsonData['data']['accZ'];
      var magnitude = jsonData['data']['magnitude'];
      // UIの更新や解析処理を実行
    } 
    else if (type == 'bpm') {
      // BPMデータの処理
      var bpm = jsonData['data']['bpm'];
      var lastInterval = jsonData['data']['lastInterval'];
      // リズム音の生成やUIの更新を実行
    }
  } catch (e) {
    print('Error parsing data: $e');
  }
}
``` 