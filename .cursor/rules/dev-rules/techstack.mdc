---
description: 
globs: 
alwaysApply: false
---
---
description: M5StickC Plus 2歩行リズム計測システム要件定義
globs: 
alwaysApply: false
---

# 技術スタック詳細

## ハードウェア
- **M5StickC Plus 2**: ESP32-PICO-D4ベースの小型デバイス
  - **プロセッサ**: ESP32-PICO-D4 (240MHz デュアルコア)
  - **メモリ**: 4MB Flash, 520KB SRAM
  - **ディスプレイ**: 1.14インチ、135x240ピクセル LCD
  - **IMUセンサー**: BMI270（加速度・ジャイロスコープ）
  - **バッテリー**: 120mAh リチウムイオン
  - **インターフェース**: USB Type-C、Grove互換ポート
  - **ボタン**: 2つのボタン（A/B）
  - **その他**: 内蔵スピーカー、LED

## ソフトウェア開発環境
- **PlatformIO**: VSCode拡張として使用
  - ビルド、デプロイ、シリアルモニタリングを統合環境で実行
- **言語**: C/C++（Arduino互換）
- **バージョン管理**: Git

## 使用ライブラリ
- **M5StickCPlus2**: M5StickC Plus 2の基本機能へのアクセス（v1.0.2）
- **M5Unified**: M5Stack製品の統合ライブラリ（v0.2.5）
  - 各種ハードウェア（ディスプレイ、IMU、ボタン等）のAPI統一
- **BluetoothSerial**: ESP32のBluetooth機能（SPP）
- **Arduino基本ライブラリ**: Wire（I2C通信）

## 開発・デプロイフロー
1. PlatformIOでコードを記述・コンパイル
2. USB経由でM5StickC Plus 2に書き込み
3. シリアルモニタでデバッグ情報を確認

## パフォーマンス考慮事項
- 50Hz サンプリングでのIMUデータ処理
- バッテリー持続時間の最適化（ESP32のスリープモード活用）
- メモリ使用量の効率化（静的割り当て優先）

## デバッグ手法
- シリアル出力によるデバッグ情報表示
- LCD画面を使った状態表示
- PlatformIOのデバッグ機能

# M5StickC 単体版：要件定義

## 1. 概要

- M5StickCを足首に装着し、内蔵IMU(加速度/ジャイロ)で歩行リズムを計測。  
- 取得したデータからM5StickC内部でリアルタイムに歩行テンポ(BPM)を推定。  
- 推定結果をもとに、M5StickC内蔵スピーカーから**クリック音(ビープ音)**を提示し、歩行者の歩行リズムを誘導。  
- 実験ログ（歩行BPMの推移、クリック音テンポなど）をM5StickCの内部ストレージもしくは外部SDカードに保存し、後日PCにて解析可能とする。  

これにより、外部スマートフォンやPCに依存せず、**M5StickC単体で計測・制御・提示・ログ収集**が完結するシステムを構築する。

---

## 2. 機能要件

### 2.1. センサ計測部

1. **加速度計測（必須）**  
   - M5StickC内蔵の IMU（MPU6886）を用いて3軸加速度を取得。  
   - **サンプリングレート**: 50 Hz（調整可能）。  
   - **レンジ**: ±2g～±8g程度を想定（歩行時の最大加速度をカバー）。  
   - 足首に装着するため、センサの取付け方向・装着方法を明確化。  
   - バンド固定で歩行の妨げにならないこと。  

2. **ジャイロ計測（任意／推奨）**  
   - 歩行の姿勢変化や足首の回転情報を取得可能。  
   - 加速度計のみでもBPM推定は可能だが、**振り子的な足首の回転情報をジャイロで補完**することで精度向上が期待できる。  

3. **センサ初期化・設定**  
   - 起動時にIMUを初期化し、サンプリング周波数やレンジを設定。  
   - ジャイロオフセットの補正処理（任意）。  

### 2.2. 歩行リズム推定部（M5StickC内蔵プログラム）

1. **BPM推定アルゴリズム（必須）**  
   - M5StickC上でリアルタイム処理を行い、歩行テンポ（BPM）を推定。  
   - **方法例**:  
     - **ピーク検出**: 足首の上下動の周期をピーク検出でカウント  
     - **自己相関**: 移動窓の自己相関から周期を求める  
     - **バンドパスフィルタ**（0.5～3.0Hz付近）で歩行周波数帯を抽出  
   - 解析結果を数秒ごとに更新し、歩行テンポを推定。  

2. **ノイズ除去・スムージング**  
   - 歩行以外の不要動作によりノイズが発生しないように適度なスムージング。  
   - ローパス／バンドパスフィルタ適用、移動平均などを実装。  

3. **演算負荷管理**  
   - M5StickCのCPU負荷を考慮し、**50Hzサンプリング + 軽量なピーク検出**などで処理を行う。  
   - フレーム単位でバッファを作り、一定のサンプル数ごとにBPMを再計算する実装が望ましい。  

### 2.3. クリック音テンポ制御部

1. **提示テンポの生成（必須）**  
   - 推定した歩行BPMをもとに、クリック音（ビープ音）のテンポを決定。  
   - 例: 現在BPMが100で目標BPMが110の場合、**5bpm刻み**などで段階的に音テンポを上げていく。  
   - 現在の歩行BPMとの乖離が大きすぎないように、スムーズに変化させるアルゴリズムを実装。  

2. **ビープ音生成（必須）**  
   - M5StickC内蔵のスピーカー／ブザーから音を出力。  
   - 一定周期(例: 60/BPM 秒間隔)で **beep()** 関数などを用い発音。  
   - 音の長さ・周波数を可変にして、クリック音として認識しやすいトーンに調整。  

3. **音量・音色（推奨）**  
   - M5StickCのスピーカー音量はハード的には制限があるが、可能なら複数のビープ周波数を用意。  
   - 屋内実験の場合は十分な音量が得られるが、屋外は騒音下で聴き取りが難しい可能性がある。  

4. **手動変更／緊急停止（推奨）**  
   - M5StickCのボタン操作により、ビープ音のテンポ変更や停止ができる機能。  
   - 実験者や被験者が急に停止したい場合などの安全策。  

### 2.4. データ収集・ログ管理部

1. **データ記録（必須）**  
   - M5StickCのフラッシュメモリ or 外部SDカード（拡張ユニット）に、**時系列ログ**を保存。  
   - 保存項目の例:  
     - タイムスタンプ  
     - 歩行BPM推定値  
     - 実際に出力したクリック音テンポ  
     - 加速度生データ（オプション：保存容量に注意）  
   - 記録周期は1～5秒単位など、必要最小限に抑えつつ、解析可能なデータを確保。  

2. **ログ形式（必須）**  
   - CSV等の汎用形式で保存。  
   - タイムスタンプ、推定BPM、クリック音テンポ、装置設定等を一行ずつ保存。  

3. **エクスポート（推奨）**  
   - PCとUSB接続した際にファイルをコピーできる仕組み、もしくはシリアル経由でログをダンプ。  
   - Wi-Fi/Bluetooth通信で自動アップロードする機能はあれば便利だが、M5StickC単体では拡張が必要。  

---

## 3. 非機能要件

### 3.1. 信頼性・安定性

1. **動作時間**  
   - M5StickC内蔵のバッテリ（200mAh程度）で連続2〜3時間動作を目標。  
   - 短時間の実験なら問題ないが、長時間実験の場合は充電しながらの使用や外部バッテリ接続を検討。  

2. **データ破損防止**  
   - ログ保存時の書き込み中断やバッテリ切れが発生しないよう注意。  
   - バッテリ残量低下時に自動で計測を停止し、ログを安全にクローズする仕組みがあると望ましい。  

### 3.2. レスポンス性能

1. **リアルタイム性**  
   - 歩行BPMの計測から音テンポ変更までの遅延を**数秒以内**に抑える。  
   - 50Hzサンプリング → 1秒～2秒程度の移動窓でBPM推定 → テンポ更新という流れを想定。  

2. **処理負荷管理**  
   - M5StickCのリソース（CPU, メモリ）は限られているため、過度な演算を避ける。  
   - 不必要に大きいバッファを確保しない、FFTなどの重い処理は軽量化する、などの設計。  

### 3.3. ユーザビリティ

1. **装着・操作**  
   - 足首バンドで固定しやすい筐体形状。  
   - 必要最低限の操作はM5StickCのボタン（1～2個）で完結するUIフロー。  
   - 起動→実験開始→終了、のシンプル手順。  

2. **画面表示（推奨）**  
   - M5StickCのLCDに現在のBPM推定値やバッテリ残量を簡単に表示。  
   - 実験担当者や被験者が自分のBPMやクリック音テンポを視覚的に確認できる。  

### 3.4. 拡張性

1. **拡張モジュール**  
   - 足首以外への装着（腰や胸など）に応用する際、固定バンドを変えるだけで対応可能。  
   - SDカードや外部センサユニットをI2C/Groveで追加し、拡張できる。  

2. **多変量データ解析**  
   - 将来的に複雑なアルゴリズム（AI/機械学習）を適用したい場合、M5StickC単体では性能が足りない可能性があるため、外部連携やクラウド処理を検討。  

### 3.5. セキュリティ・プライバシ

1. **個人情報保護**  
   - 被験者ID等をログに記載する場合、符号化や暗号化の検討。  
2. **アクセス制御**  
   - 単体動作が主であり外部ネットワークに接続しない想定のため、深刻なリスクは少ないが、USB接続時のログ抽出や設定変更を誰でもできないよう最低限のアクセス管理を考慮。  

---

## 4. システムアーキテクチャ例（M5StickC単体）

```
 ┌─────────────────────────────────┐
 │  [ M5StickC ]                 │
 │   - 内蔵IMU (MPU6886)         │
 │   - ESP32+MCU                 │
 │   - 内蔵スピーカー            │
 │   - LCD + ボタンUI            │
 │-------------------------------│
 │ 1) センサ取得 (加速度/ジャイロ)│
 │ 2) BPM推定 (ピーク検出など)    │
 │ 3) クリック音(ビープ)生成      │
 │ 4) ログ記録 (フラッシュ/SD)    │
 └─────────────────────────────────┘
         │
         ↓ (足首に装着)
[被験者が歩く → M5StickCが計測し → 音で誘導]
```

- **計測**: 内蔵IMUから定期的にデータ取得  
- **解析**: BPM推定アルゴリズムをM5StickCで実行  
- **提示**: 内蔵スピーカーでクリック音を鳴らす  
- **記録**: 内部orSDカードにBPMやテンポ情報をログ保存  

---

## 5. 導入・運用フロー

1. **装着・起動**  
   - 足首にM5StickCをバンド等で固定。  
   - ボタンで電源をONし、初期化完了をLCD表示で確認。  
2. **計測開始**  
   - ボタン操作などで「計測開始」を選択。  
   - 内部でIMU計測・BPM推定が走り始める。  
   - 現在のBPMを画面表示。  
3. **クリック音提示**  
   - 推定BPMをもとに目標テンポへ近づけるアルゴリズムが動作し、ビープ音を定期的に鳴らす。  
   - 実験担当者の要件に合わせてテンポを段階的に上げ／下げする。  
4. **リアルタイムモニタリング**  
   - 小さい画面ながら、現在のBPMやクリック音テンポを表示。  
   - 必要に応じてボタンで強制停止・一時停止などが可能。  
5. **計測終了・ログ保存**  
   - ボタン操作で計測停止。  
   - ログがフラッシュor SDカードに保存される。  
   - PCへ接続し、CSVファイル等を取り出して解析。  

---

## 6. 今後の拡張・検討事項

1. **外部スピーカーやイヤホン連携**  
   - M5StickC内蔵スピーカーは音量が限られるため、Grove端子などを使って外部ブザーを接続する、またはBluetoothオーディオ出力を実装する（ESP32の機能拡張）ことも考えられる。  
2. **長時間運用**  
   - 大容量バッテリを搭載したM5モジュールを使う、もしくはモバイルバッテリから給電する対策。  
3. **詳細ログ解析**  
   - 歩行時の加速度生波形をすべて記録して、後で詳細なスペクトル解析や歩容分析を行う場合は、ログ容量や書き込み速度を考慮しSDカード実装が望ましい。  
4. **UI強化**  
   - M5StickCの画面とボタンだけでは操作が煩雑になる可能性があるため、**最低限の操作**に留め、詳細設定はPC接続時に行うなどの運用を検討。  

---

# まとめ

- **M5StickC単体**で、加速度計測から歩行リズム推定・クリック音提示・ログ保存までを行うシステム要件を整理した。  
- 研究や簡易実験であればこの単体構成でも十分に**歩行テンポ誘導のプロトタイプ**として動作可能。  
- **課題**: 音量の小ささ、バッテリ駆動時間の制約、演算リソース制約などは利用条件に応じて運用策（外部スピーカー、モバイルバッテリ給電、演算の簡略化）を検討する。  
- ログの取り出しや操作性など、**ユーザビリティ面**はシンプルに抑え、実験に必要な情報と機能を優先して最小実装するのが現実的。
